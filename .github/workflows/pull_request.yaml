name: Pull Request
on:
  pull_request:
    branches:
      - master
jobs:
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ^1.16
      - name: Go Cache
        uses: actions/cache@v1
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
            ~/Library/Caches/go-build
            %LocalAppData%\go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Run tests
        run: |
          make test
  build:
    name: Build and Deploy
    runs-on: ubuntu-latest
    env:
      BUILD_METADATA: build.${{ github.run_number }}
      GIT_COMMIT: ${{ github.sha }}
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Unshallow
        run: git fetch --prune --unshallow
      # Launch KinD early so we can do other things while the control plane converges
      - name: KinD (Kubernetes in Docker) Initialization
        uses: helm/kind-action@v1.1.0
        with:
          version: v0.11.1
          wait: 0s
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ^1.16
      - name: Go Cache
        uses: actions/cache@v1
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
            ~/Library/Caches/go-build
            %LocalAppData%\go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Bootstrap
        run: |
          DOCKER_REGISTRY="ghcr.io/thestormforge"
          DOCKER_TAG="sha-$(git rev-parse --short HEAD)"
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login "ghcr.io" -u "${{ github.actor }}" --password-stdin
          echo "IMAGE_TAG=pr-${{ github.event.number }}" >> $GITHUB_ENV
          echo "IMG=${DOCKER_REGISTRY}/optimize-controller:${DOCKER_TAG}" >> $GITHUB_ENV
          echo "CLI_IMG=${DOCKER_REGISTRY}/optimize-cli:${DOCKER_TAG}" >> $GITHUB_ENV
          echo "SETUPTOOLS_IMG=${DOCKER_REGISTRY}/setuptools:${DOCKER_TAG}" >> $GITHUB_ENV
          echo "PULL_POLICY=" >> $GITHUB_ENV
      - name: Build controller
        run: |
          make -o test docker-build
      - name: Build tool
        uses: goreleaser/goreleaser-action@v2
        with:
          args: release --skip-sign --rm-dist
      - name: Push Docker images
        if: github.event.pull_request.head.repo.fork == false
        run: |
          make docker-push
          docker-push() {
            docker tag "$1" "$2"
            docker push "$2"
          }
          docker-push "${IMG}" "${IMG%%:*}:${IMAGE_TAG}"
          docker-push "${CLI_IMG}" "${CLI_IMG%%:*}:${IMAGE_TAG}"
          docker-push "${SETUPTOOLS_IMG}" "${SETUPTOOLS_IMG%%:*}:${IMAGE_TAG}"
      - name: Upload macOS binary
        uses: actions/upload-artifact@v2
        with:
          name: stormforge_darwin_amd64
          path: dist/stormforge-darwin-amd64.tar.gz
      - name: Upload macOS ARM binary
        uses: actions/upload-artifact@v2
        with:
          name: stormforge_darwin_arm64
          path: dist/stormforge-darwin-arm64.tar.gz
      - name: Upload Linux binary
        uses: actions/upload-artifact@v2
        with:
          name: stormforge_linux_amd64
          path: dist/stormforge-linux-amd64.tar.gz
      - name: Run integration tests
        run: |
          hack/integration.sh
